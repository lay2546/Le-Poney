// üëâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase config ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Firestore ‡πÅ‡∏•‡∏∞ Authentication
import { db, auth } from './firebase.js';

// üëâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firestore (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏Ø‡∏•‡∏Ø)
import {
  collection, addDoc, serverTimestamp, getDoc, doc, query, where, getDocs
} from "https://www.gstatic.com/firebasejs/10.11.0/firebase-firestore.js";

// üëâ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";

// üëâ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î DOM ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
document.addEventListener("DOMContentLoaded", () => {

  // üîπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Sidebar
  const menuBtn = document.getElementById("menu-btn");
  const closeBtn = document.getElementById("close-btn");
  const sidebar = document.getElementById("sidebar");
  const overlay = document.getElementById("overlay");

  // üëâ ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Sidebar
  menuBtn?.addEventListener("click", () => toggleSidebar(true));
  closeBtn?.addEventListener("click", () => toggleSidebar(false));
  overlay?.addEventListener("click", () => toggleSidebar(false));

  function toggleSidebar(show) {
    sidebar?.classList.toggle("show", show);
    overlay?.classList.toggle("show", show);
  }

  // üîπ ‡πÄ‡∏°‡∏ô‡∏π Dropdown
  document.querySelectorAll(".dropdown-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const dropdownContent = btn.nextElementSibling;
      dropdownContent?.classList.toggle("show");
    });
  });

  // üîπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô/‡∏≠‡∏≠‡∏Å
  const loginBtn = document.getElementById("login-btn");
  const logoutBtn = document.getElementById("logout-btn");
  const loginModal = document.getElementById("login-modal");

  loginBtn?.addEventListener("click", () => loginModal?.classList.remove("hidden"));
  document.getElementById("close-login-modal")?.addEventListener("click", () => loginModal?.classList.add("hidden"));

  // üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° login/logout ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  onAuthStateChanged(auth, (user) => {
    loginBtn?.classList.toggle("hidden", !!user);
    logoutBtn?.classList.toggle("hidden", !user);
  });

  logoutBtn?.addEventListener("click", async () => {
    await auth.signOut();
    window.location.reload();
  });

  // üîπ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const cartCount = document.getElementById("cart-count");
  const cartItems = document.getElementById("cart-items");
  const clearCart = document.getElementById("clear-cart");
  const totalPriceElement = document.getElementById("total-price");
  const totalItemsElement = document.getElementById("total-items");
  const checkoutBtn = document.getElementById("checkout");
  const slipInput = document.getElementById("payment-slip");
  const slipPreview = document.getElementById("slip-preview");

  // üëâ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å localStorage
  let cart = JSON.parse(localStorage.getItem("cart")) || [];

  // üëâ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
  renderCart();

  function updateCartCount() {
    let totalItems = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
    cartCount.textContent = `(${totalItems})`;
  }

  function calculateTotalPrice() {
    let total = cart.reduce((sum, item) => sum + parseFloat(item.price) * (item.quantity || 1), 0);
    totalPriceElement.textContent = total.toFixed(2);
    totalItemsElement.textContent = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
  }

  function renderCart() {
    cartItems.innerHTML = "";
    if (cart.length === 0) {
      cartItems.innerHTML = "<li class='text-center text-gray-500'>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ üõí</li>";
    } else {
      cart.forEach((item, index) => {
        const li = document.createElement("li");
        li.className = "flex justify-between items-center p-2 border-b";
        li.innerHTML = `
          <span>${item.name} (x${item.quantity || 1}) - ‡∏ø${item.price}</span>
          <div class="flex items-center gap-2">
            <button class="decrease-qty" data-index="${index}">‚ûñ</button>
            <span>${item.quantity || 1}</span>
            <button class="increase-qty" data-index="${index}">‚ûï</button>
            <button class="remove-item text-red-500" data-index="${index}">‚ùå</button>
          </div>
        `;
        cartItems.appendChild(li);
      });
    }
    calculateTotalPrice();
    updateCartCount();
  }

  // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  cartItems.addEventListener("click", (event) => {
    let index = event.target.dataset.index;
    if (event.target.classList.contains("increase-qty")) {
      cart[index].quantity = (cart[index].quantity || 1) + 1;
    } else if (event.target.classList.contains("decrease-qty")) {
      if (cart[index].quantity > 1) {
        cart[index].quantity--;
      } else {
        cart.splice(index, 1);
      }
    } else if (event.target.classList.contains("remove-item")) {
      cart.splice(index, 1);
    }
    localStorage.setItem("cart", JSON.stringify(cart));
    renderCart();
  });

  // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° add-to-cart
  document.addEventListener("click", (event) => {
    if (event.target.classList.contains("add-to-cart")) {
      const user = auth.currentUser;
      if (!user) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        loginModal?.classList.remove("hidden");
        return;
      }

      let name = event.target.dataset.name;
      let price = event.target.dataset.price;
      let existingItem = cart.find(item => item.name === name);

      if (existingItem) {
        existingItem.quantity++;
      } else {
        cart.push({ name, price, quantity: 1 });
      }

      localStorage.setItem("cart", JSON.stringify(cart));
      renderCart();
    }
  });

  // üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearCart?.addEventListener("click", () => {
    localStorage.removeItem("cart");
    cart = [];
    renderCart();
  });

  // üîπ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
  async function submitOrder() {
    const user = auth.currentUser;
    if (!user) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      loginModal?.classList.remove("hidden");
      return;
    }

    if (cart.length === 0) {
      alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤");
      return;
    }

    try {
      const userDoc = await getDoc(doc(db, "users", user.uid));
      const userData = userDoc.exists() ? userDoc.data() : {};
      const name = userData.name || "";
      const phone = userData.phone || "";
      const address = userData.address || "";

      if (!address.trim()) {
        alert("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô");
        window.location.href = "Delivery.html";
        return;
      }

      const methodSelect = document.getElementById("payment-method");
      const paymentMethod = methodSelect?.value || "cod";

      let slipUrl = "";
      if (paymentMethod === "transfer") {
        slipUrl = currentSlipUrl;
        if (!slipUrl) {
          alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô");
          return;
        }
      }

      await addDoc(collection(db, "orders"), {
        uid: user.uid,
        name, phone, address,
        cart,
        paymentMethod,
        slipUrl,
        couponCode: couponInput.value.trim() || null,
        discountPercent: currentDiscount || 0,
        totalAmount: parseFloat(totalPriceElement.textContent) || 0,
        createdAt: serverTimestamp()
      });

      alert("‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
      localStorage.removeItem("cart");
      window.location.href = "orderhistory.html";
    } catch (error) {
      console.error("‚ùå Error submitting order:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");
    }
  }

  // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô checkout
  checkoutBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    confirmModal?.classList.remove('hidden');
  });

  // üîπ ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞ QR PromptPay
  const paymentMethod = document.getElementById('payment-method');
  const slipUpload = document.getElementById('slip-upload-container');
  const qrPreview = document.getElementById("qr-preview");

  paymentMethod?.addEventListener('change', function () {
    if (paymentMethod.value === 'transfer') {
      slipUpload.classList.remove('hidden');
      qrPreview.classList.remove('hidden');
      const qrCanvas = document.getElementById("qr-canvas");
      const amount = totalPriceElement?.textContent || "0.00";
      QRCode.toCanvas(qrCanvas, `promptpay.io/0642715511${amount}`, {
        width: 200,
        color: { dark: "#000", light: "#fff" }
      });
    } else {
      slipUpload.classList.add('hidden');
      qrPreview.classList.add('hidden');
    }
  });

  // üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
  const uploadSlipToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "upload-slip");
    const res = await fetch("https://api.cloudinary.com/v1_1/dpgru06ox/image/upload", {
      method: "POST",
      body: formData
    });
    const data = await res.json();
    return data.secure_url;
  };

  let currentSlipUrl = "";

  // üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  slipInput?.addEventListener("change", async function (e) {
    const file = e.target.files[0];
    if (file) {
      currentSlipUrl = await uploadSlipToCloudinary(file);
      slipPreview.src = currentSlipUrl;
      slipPreview.classList.remove('hidden');
    }
  });

  // üîπ Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  const confirmModal = document.getElementById('confirm-modal');
  const confirmSubmit = document.getElementById('confirm-submit');
  const cancelSubmit = document.getElementById('cancel-submit');

  cancelSubmit?.addEventListener('click', () => confirmModal?.classList.add('hidden'));
  confirmSubmit?.addEventListener('click', async () => {
    confirmModal?.classList.add('hidden');
    await submitOrder();
  });

  // üîπ ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
  const couponInput = document.getElementById("coupon-input");
  const applyCouponBtn = document.getElementById("apply-coupon");
  const couponResult = document.getElementById("coupon-result");
  const discountValueElement = document.getElementById("discount-value");
  const subtotalElement = document.getElementById("subtotal-price");
  const discountAmountElement = document.getElementById("discount-amount");

  let currentDiscount = 0;

  applyCouponBtn?.addEventListener("click", async () => {
    const code = couponInput.value.trim();
    if (!code) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á");
      return;
    }
    try {
      const q = query(collection(db, "coupons"), where("code", "==", code));
      const querySnap = await getDocs(q);
      if (querySnap.empty) {
        alert("‚ùå ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }
      const coupon = querySnap.docs[0].data();
      if (coupon.expired) {
        alert("‚ùå ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß");
        return;
      }
      currentDiscount = coupon.discount || 0;
      const subtotal = cart.reduce((sum, item) => sum + parseFloat(item.price) * (item.quantity || 1), 0);
      const discountAmount = (subtotal * currentDiscount) / 100;
      const total = subtotal - discountAmount;
      subtotalElement.textContent = subtotal.toFixed(2);
      discountAmountElement.textContent = discountAmount.toFixed(2);
      totalPriceElement.textContent = total.toFixed(2);
      couponResult.classList.remove("hidden");
      discountValueElement.textContent = currentDiscount;
    } catch (err) {
      console.error("Error applying coupon:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á");
    }
  });

  // üîπ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á (admin)
  document.getElementById("go-to-coupon-page")?.addEventListener("click", () => {
    window.location.href = "admin_coupon.html";
  });

  // üîπ Toast ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  function showToast(message, type = "info") {
    const toast = document.createElement("div");
    toast.textContent = message;
    toast.className = `
      toast-message
      ${type === "success" ? "bg-green-500" : type === "error" ? "bg-red-500" : "bg-gray-700"}
      animate-fade-in-out
      show
    `.replace(/\s+/g, ' ');
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.classList.remove("show");
      setTimeout(() => toast.remove(), 300);
    }, 2000);
  }

});
